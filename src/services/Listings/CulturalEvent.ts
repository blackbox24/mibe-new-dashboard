import { Key } from "react";
import { api, base_url } from "../apiConfig";

export interface CulturalEvent {
  id: number;
  title: string;
  description: string;
  destination: string;
  type: "free" | "paid";
  image_url: File | string | null;
  price: number;
  published?: string;
}

// Fetches a list of Cultural Event from the API
export const getStory = async (): Promise<CulturalEvent[]> => {
  const response = await api(`/cultural-events/`);
  if (response.status !== 200) {
    throw new Error('Failed to fetch cultural event');
  }
  return response.data;
};

export const getCulturalEventWithPagination = async (page: number = 1, limit: number = 10): Promise<{
  culturalEvent: CulturalEvent[];
  pagination: {
    page: number;
    limit: number;
    totalPages: number;
    totalRecords: number;
  };
}> => {
  const response = await api.get(`/cultural-events/paginated/?page=${page}&limit=${limit}`);
  if (response.status !== 200) {
    throw new Error('Failed to fetch cultural Event with pagination');
  }
  const data = await response.data;
  return {
    culturalEvent: data.events,
    pagination: data.pagination,
  };
}

// Adds a new culturalEvent to the API
export const addCulturalEvent = async (
  CulturalEvent: Omit<CulturalEvent, 'id'> // Excludes 'id' since it's generated by the server
): Promise<CulturalEvent> => {
  const formData = new FormData();

  // Append the image URL if provided
  formData.append('image', CulturalEvent.image_url);

  // Append other fields to the form data
  Object.entries(CulturalEvent).forEach(([key, value]) => {
    if (key !== 'image_url' && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  const response = await api.post(`/cultural-events/`, formData);

  if (response.status !== 201) {
    throw new Error('Failed to add cultural event');
  }

  return response.data;
};

// Updates an existing CulturalEvent in the API
export const updateCulturalEvent = async (
  id: number, // ID of the CulturalEvent to update
  culturalEvent: Partial<CulturalEvent> // Partial object to allow updating specific fields
): Promise<CulturalEvent> => {
  const formData = new FormData();

  // Append the image URL if provided]
  formData.append('image', culturalEvent.image_url as File);

  // Append other fields to the form data
  Object.entries(culturalEvent).forEach(([key, value]) => {
    if (key !== 'image_url' && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  const response = await api.put(`/cultural-events/${id}`, formData);

  if (response.status !== 200) {
    throw new Error('Failed to update cultural event');
  }

  return response.data;
};

// Deletes an CulturalEvent from the API
export const deleteCulturalEvent = async (id: number): Promise<void> => {
  const response = await api.delete(`/cultural-events/${id}`);

  if (response.status !== 200) {
    throw new Error('Failed to delete cultural event');
  }
};

export const publishCulturalEvent = async(id: number, published: { published: string }): Promise<CulturalEvent> => {
    const data = JSON.stringify(published);
    console.log(published);
    const response = await api.post(`/cultural-events/publish/${id}`,data,{
        headers:{
            "Content-Type":"application/json"
        }
    });
    if(response.status !== 200){
        throw new Error("Failed to publish cultural event")
    }

    return response.data;
}