import {api, base_url} from "../apiConfig";

export interface GiftCard {
    title: string;
    code: string | null;
    description: string;
    amount: number; 
    gifttypes: string;
    published: "1" | "0";
    image_url: File | string;
    occasion: string;
}

// Fetches a list of GiftCard from the API


export const getGiftCardWithPagination = async (page: number = 1, limit: number = 10): Promise<{
  records: GiftCard[];
  pagination: {
    page: number;
    limit: number;
    totalPages: number;
    totalRecords: number;
  };
}> => {
  const response = await api.get(`/giftcards/?page=${page}&limit=${limit}`);
  if (response.status !== 200) {
    throw new Error('Failed to fetch records with pagination');
  }
  const data = await response.data;
  return {
    records: data.records,
    pagination: data.pagination,
  };
}

// Adds a new GiftCard to the API
export const addGiftCard = async (
  GiftCard: Omit<GiftCard, 'id'> // Excludes 'id' since it's generated by the server
): Promise<GiftCard> => {
  const formData = new FormData();

  // Append the image URL if provided
  formData.append('image', GiftCard.image_url);

  // Append other fields to the form data
  Object.entries(GiftCard).forEach(([key, value]) => {
    if (key !== 'image_url' && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  const response = await api.post(`/giftcards/`, formData);

  if (response.status !== 201) {
    throw new Error('Failed to add GiftCard');
  }

  return response.data;
};

// Updates an existing GiftCard in the API
export const updateGiftCard = async (
  id: number, // ID of the GiftCard to update
  GiftCard: Partial<GiftCard> // Partial object to allow updating specific fields
): Promise<GiftCard> => {
  const formData = new FormData();

  // Append the image URL if provided]
  formData.append('image', GiftCard.image_url as File);

  // Append other fields to the form data
  Object.entries(GiftCard).forEach(([key, value]) => {
    if (key !== 'image_url' && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  const response = await api.put(`/giftcards/${id}`, formData);

  if (response.status !== 200) {
    throw new Error('Failed to update GiftCard');
  }

  return response.data;
};

// Deletes an GiftCard from the API
export const deleteGiftcard = async (id: number): Promise<void> => {
  const response = await api.delete(`/giftcards/${id}`);

  if (response.status !== 200) {
    throw new Error('Failed to delete GiftCard');
  }
};

export const publishGiftCard = async(id: number, published: { published: string }): Promise<GiftCard> => {
    const data = JSON.stringify(published);
    const response = await api.post(`/giftcards/publish/${id}`,data,{
        headers:{
            "Content-Type":"application/json"
        }
    });
    if(response.status !== 200){
        throw new Error("Failed to publish acommodations")
    }

    return response.data;
}